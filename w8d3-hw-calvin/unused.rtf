  
  
  
  <button onClick={this.changePage} id="ships">Show me the Ships!!!</button>
        <button onClick={this.changePage} id="planets">Show me the PLANETS!!!</button>
        <button onClick={this.changePage} id="people">Show me the CHARACTERS!!!</button>
        {
          this.state.chosenPage === null ?
            null
            :
            this.state.chosenPage === "ships" ?
              <ShipsContainer></ShipsContainer>
              :
              this.state.chosenPage === "planets" ?
                <PlanetsContainer></PlanetsContainer>
                :
                <PeopleContainer></PeopleContainer>
        }
      </div>
    );
  }
}

export default App;








var RequestHandler = require('./handlers/RequestHandler');


var serverUrl = "https://api.giphy.com";

/**
 * Class representing the networking client.
 */


class GphApiClient {

  constructor(apiKey) {
    this.apiKey = apiKey;
  }

  /**
   * Initialize the SDK by passing in the apiKey.
   */
  setCredentials(apiKey) {
    this.apiKey = apiKey;
  }

  /**
   * @return a list of gifs that match the inputted search query
   * @param {String} type - specify whether it is a gif or a sticker
   * @param {Object} params an object containing parameters
   * @param {String} params.q search query term or phrase
   * @param {Integer} params.limit (optional) number of results to return, maximum 100. Default 25.
   * @param {Integer} params.offset(optional) results offset, defaults to 0.
   * @param {String}  params.rating (optional) limit results to those rated (y,g, pg, pg-13 or r).
   * @param {String} params.lang (optional) specify default country for regional content; format is 2-letter ISO 639-1 country code. See list of supported languages here
   * @param {Function} callback (optional) callback will default to a promise if nothing is passed in
   */
  search(type, params, cb) {

    const data = {
      //grabs the correct endpoint from an object
      url: `${serverUrl}/v1/${type}/search`,
      method: 'get',
      type: type,
      params: _.extend({
        api_key: this.apiKey
      }, params)
    }

    return RequestHandler(data, 'search', cb);
  }





import React, {Component} from 'react';


class SearchContainer extends Component{
    constructor(){
        super();
        this.state = {
        
    }
}


render(){
    const giffyList = this.props.giffys.map((giffy, i) => {
        const formattedTime = this.timeConverter(giffy.properties.time);
        console.log(formattedTime);
        return (
            <div id = "info" key = {i}>
                <p>M {giffy.properties.mag} - {giffy.properties.place} / {formattedTime}</p>
            </div>
        )
    })
    return (
        <div>
            {giffyList}
        </div>
    )
}
}


export default SearchContainer;










// class GiphyContainer extends Component{
//     constructor(props){
//         super(props);
//         this.state = {
//             giphy: []
//             // loading: true
//         }
//     }
//     // componentWillMount(){
//     //     this.getGiphys({search: ""});
//     // }

//     searchGiphys = async (formData) => {
//         let url = `http://api.giphy.com/v1/gifs/search?${formData.search}&api_key=AWqW5zAzkEfXW9KFd8meD4EQIcL7wVxm`;
//         // try{
//             const result = await fetch(url);
// 			console.log(result, '<---------json gifs');
// 			const parsedResult = await result.json()
// 			await this.setState({
// 				giphy: parsedResult.data
// 			})
//             // if(!giphy.ok){
//             //     throw Error(giphy.statusText);
//             // }
//             // const parsedResult = await gifs.json();
//             // console.log(parsedResult, 'parsed result');
//             // return parsedResult;
        
//         // }catch(err) {
//         //     console.log(err, '<-- error in MainSearch catch block');
//         //     return err;
//         // } 
//     }

//     // componentDidMount() {
//     //     this.getGiphys().then((data) => {
//     //         this.setState({
//     //             gifs: data,
//     //             loading: false
//     //         })
//     //     })
//     // }
//     render(){
// 		console.log(this.state, "<------this.state in the render block of GiphyContainer")
// 		const giphyList = this.state.giphy.map((gif, i)=>{
// 			return(
// 				<div key={i}>
// 					<img src={gif.images.downsized_medium.url} alt="this.giphy"/>
// 				</div>
// 			)
// 		})
// 		return(
//             <div className="seachGiphys">
// 				<h2>Giphy Container</h2>
// 				<GiphySearchForm searchGiphys={this.searchGiphys}></GiphySearchForm>
// 				{giphyList}
               
//             </div>
//         )
//     }
// }

// export default GiphyContainer;

// // const GiphyContainer = (props) => {
// // 	const giphyList = props.gifs.data.map((gif, i) => {
// // 		return (
// // 			<ul key={i}>
// // 			<img src={gif.images.downsized.url} alt="gif images"></img>

// // 			</ul>
// // 		)
// // 	})

// // 	return(
// // 		<div className="giphyContainer">
// // 			{giphyList}
// // 		</div>
// // 	)
// // }

// export default GiphyContainer;



 {/* <h1 id="h1">Your search for {this.props.query} gifs: </h1>
                {this.state.loading ? <span>Data is loading...</span> : <GiphyList gifs={this.state.gifs}/>} */}